{"remainingRequest":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue","mtime":499162500000},{"path":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tangyin/PersonalSpace/projects/demoAboutJQWidgets/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport '../jqwidgets/jqxcore.js';\nimport '../jqwidgets/jqxdata.js';\nimport '../jqwidgets/jqxinput.js';\nimport '../jqwidgets/jqxpasswordinput.js';\nimport '../jqwidgets/jqxnumberinput.js';\nimport '../jqwidgets/jqxradiobutton.js';\nimport '../jqwidgets/jqxcheckbox.js';\nimport '../jqwidgets/jqxbuttons.js';\nimport '../jqwidgets/jqxscrollbar.js';\nimport '../jqwidgets/jqxlistbox.js';\nimport '../jqwidgets/jqxdropdownlist.js';\nimport '../jqwidgets/jqxcombobox.js';\nimport '../jqwidgets/jqxmaskedinput.js';\nimport '../jqwidgets/globalization/globalize.js'\nimport '../jqwidgets/jqxcalendar.js';\nimport '../jqwidgets/jqxdatetimeinput.js';\nimport '../jqwidgets/jqxform.js';\n\nexport default {\n    props: {\n        padding: Object,\n        backgroundColor: String,\n        borderColor: String,\n        value: Object,\n        template: Array,\n        autoCreate: {\n            default: true,\n            type: Boolean\n        }\n    },\n    created: function () {\n        this.id = 'jqxForm' + JQXLite.generateID();\n        this.componentSelector = '#' + this.id;\n    },\n    mounted: function () {\n        if (this.autoCreate) this.__createComponent__();\n    },\n    methods: {\n        createComponent: function (options) {\n            if (!this.autoCreate) this.__createComponent__(options)\n            else console.warn('Component is already created! If you want to use createComponent, please set \"autoCreate\" property to \"false\".');\n        },\n        setOptions: function (options) {\n            JQXLite(this.componentSelector).jqxForm(options);\n        },\n        getOptions: function () {\n            const usedProps = Object.keys(this.__manageProps__());\n            const resultToReturn = {};\n            for (let i = 0; i < usedProps.length; i++) {\n                resultToReturn[usedProps[i]] = JQXLite(this.componentSelector).jqxForm(usedProps[i]);\n            }\n            return resultToReturn;\n        },\n        getInstance: function() {\n            return JQXLite(this.componentSelector).jqxForm('getInstance');  \n        },\n        refresh: function() {\n            JQXLite(this.componentSelector).jqxForm('refresh');  \n        },\n        destroy: function() {\n            JQXLite(this.componentSelector).jqxForm('destroy');  \n        },\n        hideComponent: function(name) {\n            JQXLite(this.componentSelector).jqxForm('hideComponent', name);  \n        },\n        showComponent: function(name) {\n            JQXLite(this.componentSelector).jqxForm('showComponent', name);  \n        },\n        val: function(value) {\n            if (value !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('val',  value)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('val');\n            }\n        },\n        submit: function(action, target, method) {\n            return JQXLite(this.componentSelector).jqxForm('submit', action, target, method);  \n        },\n        getComponentByName: function(name) {\n            return JQXLite(this.componentSelector).jqxForm('getComponentByName', name);  \n        },\n        _padding: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('padding', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('padding');\n            }\n        },\n        _backgroundColor: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('backgroundColor', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('backgroundColor');\n            }\n        },\n        _borderColor: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('borderColor', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('borderColor');\n            }\n        },\n        _value: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('value', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('value');\n            }\n        },\n        _template: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxForm('template', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxForm('template');\n            }\n        },\n        __createComponent__: function (options) {\n            let widgetOptions;\n            options ? widgetOptions = options : widgetOptions = this.__manageProps__();\n            JQXLite(this.componentSelector).jqxForm(widgetOptions);\n            this.__extendProps__();\n            this.__wireEvents__();\n        },\n        __manageProps__: function () {\n            const widgetProps = ['padding','backgroundColor','borderColor','value','template'];\n            const componentProps = this.$options.propsData;\n            let options = {};\n\n            for (let prop in componentProps) {\n                if (widgetProps.indexOf(prop) !== -1) {\n                    options[prop] = componentProps[prop];\n                }\n            }\n            return options;\n        },\n        __extendProps__: function () {\n            const that = this;\n\n            Object.defineProperty(that, 'padding', {\n                get: function() {\n                    return that._padding();\n                },\n                set: function(newValue) {\n                    that._padding(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'backgroundColor', {\n                get: function() {\n                    return that._backgroundColor();\n                },\n                set: function(newValue) {\n                    that._backgroundColor(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'borderColor', {\n                get: function() {\n                    return that._borderColor();\n                },\n                set: function(newValue) {\n                    that._borderColor(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'value', {\n                get: function() {\n                    return that._value();\n                },\n                set: function(newValue) {\n                    that._value(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'template', {\n                get: function() {\n                    return that._template();\n                },\n                set: function(newValue) {\n                    that._template(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n        },\n        __wireEvents__: function () {\n            const that = this;\n\n            JQXLite(this.componentSelector).on('formDataChange', function (event) { that.$emit('formDataChange', event); });\n            JQXLite(this.componentSelector).on('buttonClick', function (event) { that.$emit('buttonClick', event); });\n        }\n    }\n}\n",{"version":3,"sources":["vue_jqxform.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"vue_jqxform.vue","sourceRoot":"node_modules/jqwidgets-scripts/jqwidgets-vue","sourcesContent":["<template>\n    <div v-bind:id=\"id\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\n    import '../jqwidgets/jqxcore.js';\n    import '../jqwidgets/jqxdata.js';\n    import '../jqwidgets/jqxinput.js';\n    import '../jqwidgets/jqxpasswordinput.js';\n    import '../jqwidgets/jqxnumberinput.js';\n    import '../jqwidgets/jqxradiobutton.js';\n    import '../jqwidgets/jqxcheckbox.js';\n    import '../jqwidgets/jqxbuttons.js';\n    import '../jqwidgets/jqxscrollbar.js';\n    import '../jqwidgets/jqxlistbox.js';\n    import '../jqwidgets/jqxdropdownlist.js';\n    import '../jqwidgets/jqxcombobox.js';\n    import '../jqwidgets/jqxmaskedinput.js';\n    import '../jqwidgets/globalization/globalize.js'\n    import '../jqwidgets/jqxcalendar.js';\n    import '../jqwidgets/jqxdatetimeinput.js';\n    import '../jqwidgets/jqxform.js';\n\n    export default {\n        props: {\n            padding: Object,\n            backgroundColor: String,\n            borderColor: String,\n            value: Object,\n            template: Array,\n            autoCreate: {\n                default: true,\n                type: Boolean\n            }\n        },\n        created: function () {\n            this.id = 'jqxForm' + JQXLite.generateID();\n            this.componentSelector = '#' + this.id;\n        },\n        mounted: function () {\n            if (this.autoCreate) this.__createComponent__();\n        },\n        methods: {\n            createComponent: function (options) {\n                if (!this.autoCreate) this.__createComponent__(options)\n                else console.warn('Component is already created! If you want to use createComponent, please set \"autoCreate\" property to \"false\".');\n            },\n            setOptions: function (options) {\n                JQXLite(this.componentSelector).jqxForm(options);\n            },\n            getOptions: function () {\n                const usedProps = Object.keys(this.__manageProps__());\n                const resultToReturn = {};\n                for (let i = 0; i < usedProps.length; i++) {\n                    resultToReturn[usedProps[i]] = JQXLite(this.componentSelector).jqxForm(usedProps[i]);\n                }\n                return resultToReturn;\n            },\n            getInstance: function() {\n                return JQXLite(this.componentSelector).jqxForm('getInstance');  \n            },\n            refresh: function() {\n                JQXLite(this.componentSelector).jqxForm('refresh');  \n            },\n            destroy: function() {\n                JQXLite(this.componentSelector).jqxForm('destroy');  \n            },\n            hideComponent: function(name) {\n                JQXLite(this.componentSelector).jqxForm('hideComponent', name);  \n            },\n            showComponent: function(name) {\n                JQXLite(this.componentSelector).jqxForm('showComponent', name);  \n            },\n            val: function(value) {\n                if (value !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('val',  value)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('val');\n                }\n            },\n            submit: function(action, target, method) {\n                return JQXLite(this.componentSelector).jqxForm('submit', action, target, method);  \n            },\n            getComponentByName: function(name) {\n                return JQXLite(this.componentSelector).jqxForm('getComponentByName', name);  \n            },\n            _padding: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('padding', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('padding');\n                }\n            },\n            _backgroundColor: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('backgroundColor', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('backgroundColor');\n                }\n            },\n            _borderColor: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('borderColor', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('borderColor');\n                }\n            },\n            _value: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('value', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('value');\n                }\n            },\n            _template: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxForm('template', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxForm('template');\n                }\n            },\n            __createComponent__: function (options) {\n                let widgetOptions;\n                options ? widgetOptions = options : widgetOptions = this.__manageProps__();\n                JQXLite(this.componentSelector).jqxForm(widgetOptions);\n                this.__extendProps__();\n                this.__wireEvents__();\n            },\n            __manageProps__: function () {\n                const widgetProps = ['padding','backgroundColor','borderColor','value','template'];\n                const componentProps = this.$options.propsData;\n                let options = {};\n\n                for (let prop in componentProps) {\n                    if (widgetProps.indexOf(prop) !== -1) {\n                        options[prop] = componentProps[prop];\n                    }\n                }\n                return options;\n            },\n            __extendProps__: function () {\n                const that = this;\n\n                Object.defineProperty(that, 'padding', {\n                    get: function() {\n                        return that._padding();\n                    },\n                    set: function(newValue) {\n                        that._padding(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'backgroundColor', {\n                    get: function() {\n                        return that._backgroundColor();\n                    },\n                    set: function(newValue) {\n                        that._backgroundColor(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'borderColor', {\n                    get: function() {\n                        return that._borderColor();\n                    },\n                    set: function(newValue) {\n                        that._borderColor(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'value', {\n                    get: function() {\n                        return that._value();\n                    },\n                    set: function(newValue) {\n                        that._value(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'template', {\n                    get: function() {\n                        return that._template();\n                    },\n                    set: function(newValue) {\n                        that._template(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n            },\n            __wireEvents__: function () {\n                const that = this;\n\n                JQXLite(this.componentSelector).on('formDataChange', function (event) { that.$emit('formDataChange', event); });\n                JQXLite(this.componentSelector).on('buttonClick', function (event) { that.$emit('buttonClick', event); });\n            }\n        }\n    }\n</script>\n"]}]}